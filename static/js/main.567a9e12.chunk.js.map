{"version":3,"sources":["components/Markdown/index.ts","components/Markdown/Markdown.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Markdown","props","filePath","useState","markdown","setMarkdown","useEffect","fetch","then","res","text","cxt","catch","reason","console","error","innerMarkHTML","useMemo","__html","marked","className","dangerouslySetInnerHTML","App","href","target","shape","icon","DownloadOutlined","size","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+KAEeA,G,YCO4B,SAACC,GAAW,IAC3CC,EAAaD,EAAbC,SAD0C,EAElBC,mBAAS,IAFS,mBAE3CC,EAF2C,KAEjCC,EAFiC,KAIlDC,qBAAU,WACNC,MAAML,GAAUM,MAAK,SAAAC,GACjB,OAAOA,EAAIC,UACZF,MAAK,SAAAG,GACJN,EAAYM,MACbC,OAAM,SAAAC,GACLC,QAAQC,MAAMF,QAGnB,CAACX,IAEJ,IAAMc,EAAgBC,mBAAQ,WAC1B,MAAO,CAAEC,OAAQC,IAAOf,MACzB,CAACA,IAEJ,OAAQ,6BAASgB,UAAU,gBAAgBC,wBAAyBL,M,wBCRzDM,MAbf,WAEE,OACE,yBAAKF,UAAU,OACb,uBAAGA,UAAU,WAAWG,KAAK,qBAAqBC,OAAO,UACvD,kBAAC,IAAD,CAAQC,MAAM,SAASC,KAAM,kBAACC,EAAA,EAAD,MAC3BC,KAAK,WAET,kBAAC,EAAD,CAAU1B,SAAS,wBCHnB2B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CJ,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACT5B,MAAK,SAAAiC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BjC,QAAQkC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlB3B,QAAQkC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5B7B,OAAM,SAAAG,GACLD,QAAQC,MAAM,4CAA6CA,MClGjEoC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDiBrB,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIkB,IACpBC,UACA1B,OAAOC,SAAST,MAEJmC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,UAAN,sBAEP5B,IAgEV,SAAiCO,EAAeC,GAE9C9B,MAAM6B,EAAO,CACXwB,QAAS,CAAE,iBAAkB,YAE5BpD,MAAK,SAAAqD,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAM1D,MAAK,SAAAiC,GACjCA,EAAa0B,aAAa3D,MAAK,WAC7BuB,OAAOC,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1BzB,OAAM,WACLE,QAAQkC,IACN,oEAvFAqB,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAM1D,MAAK,WACjCM,QAAQkC,IACN,iHAMJb,EAAgBC,EAAOC,OC1C/BE,I","file":"static/js/main.567a9e12.chunk.js","sourcesContent":["import Markdown from './Markdown'\n\nexport default Markdown\n","import React, { useState, useMemo, useEffect } from 'react';\nimport marked from 'marked';\nimport 'github-markdown-css';\nimport './style'\n\ninterface MarkdownProps {\n    filePath: string;\n}\n\nconst Markdown: React.SFC<MarkdownProps> = (props) => {\n    const { filePath } = props;\n    const [markdown, setMarkdown] = useState(\"\");\n\n    useEffect(() => {\n        fetch(filePath).then(res => {\n            return res.text();\n        }).then(cxt => {\n            setMarkdown(cxt);\n        }).catch(reason => {\n            console.error(reason);\n        });\n\n    }, [filePath]);\n\n    const innerMarkHTML = useMemo(() => {\n        return { __html: marked(markdown) }\n    }, [markdown])\n\n    return (<article className='markdown-body' dangerouslySetInnerHTML={innerMarkHTML} />);\n}\n\nexport default Markdown;\n","import React from 'react';\nimport { Markdown } from './components'\nimport { Button } from 'antd';\nimport { DownloadOutlined } from '@ant-design/icons';\n\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <a className='download' href='/resume/resume.pdf' target='_blank'>\n        <Button shape=\"circle\" icon={<DownloadOutlined />}\n          size='large' />\n      </a>\n      <Markdown filePath=\"/resume/resume.md\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL || \"\",\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}